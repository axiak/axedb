// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dullahan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dullahan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dullahan {
namespace models {

namespace {

const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnMetadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ColumnMetadata_IndexType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TabletMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TabletMetadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TabletMetadata_Endianness_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dullahan_2eproto() {
  protobuf_AddDesc_dullahan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dullahan.proto");
  GOOGLE_CHECK(file != NULL);
  Record_descriptor_ = file->message_type(0);
  static const int Record_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, values_),
  };
  Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record));
  Record_KeyValue_descriptor_ = Record_descriptor_->nested_type(0);
  static const int Record_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_KeyValue, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_KeyValue, value_),
  };
  Record_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_KeyValue_descriptor_,
      Record_KeyValue::default_instance_,
      Record_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_KeyValue));
  ColumnMetadata_descriptor_ = file->message_type(1);
  static const int ColumnMetadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetadata, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetadata, type_),
  };
  ColumnMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnMetadata_descriptor_,
      ColumnMetadata::default_instance_,
      ColumnMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnMetadata));
  ColumnMetadata_IndexType_descriptor_ = ColumnMetadata_descriptor_->enum_type(0);
  TabletMetadata_descriptor_ = file->message_type(2);
  static const int TabletMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, last_tablet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, written_endianness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, size_of_bitword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, column_metadatas_),
  };
  TabletMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TabletMetadata_descriptor_,
      TabletMetadata::default_instance_,
      TabletMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TabletMetadata));
  TabletMetadata_Endianness_descriptor_ = TabletMetadata_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dullahan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_KeyValue_descriptor_, &Record_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnMetadata_descriptor_, &ColumnMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TabletMetadata_descriptor_, &TabletMetadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dullahan_2eproto() {
  delete Record::default_instance_;
  delete Record_reflection_;
  delete Record_KeyValue::default_instance_;
  delete Record_KeyValue_reflection_;
  delete ColumnMetadata::default_instance_;
  delete ColumnMetadata_reflection_;
  delete TabletMetadata::default_instance_;
  delete TabletMetadata_reflection_;
}

void protobuf_AddDesc_dullahan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016dullahan.proto\022\017dullahan.models\"\204\001\n\006Re"
    "cord\022\021\n\ttimestamp\030\001 \001(\006\022\n\n\002id\030\002 \001(\014\0220\n\006v"
    "alues\030\003 \003(\0132 .dullahan.models.Record.Key"
    "Value\032)\n\010KeyValue\022\016\n\006column\030\001 \001(\r\022\r\n\005val"
    "ue\030\002 \001(\014\"\204\001\n\016ColumnMetadata\022\016\n\006column\030\001 "
    "\001(\r\022\?\n\004type\030\002 \001(\0162).dullahan.models.Colu"
    "mnMetadata.IndexType:\006BITMAP\"!\n\tIndexTyp"
    "e\022\010\n\004NONE\020\000\022\n\n\006BITMAP\020\001\"\347\001\n\016TabletMetada"
    "ta\022\026\n\016last_tablet_id\030\001 \001(\004\022F\n\022written_en"
    "dianness\030\002 \001(\0162*.dullahan.models.TabletM"
    "etadata.Endianness\022\027\n\017size_of_bitword\030\003 "
    "\001(\r\0229\n\020column_metadatas\030\004 \003(\0132\037.dullahan"
    ".models.ColumnMetadata\"!\n\nEndianness\022\007\n\003"
    "BIG\020\000\022\n\n\006LITTLE\020\001", 537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dullahan.proto", &protobuf_RegisterTypes);
  Record::default_instance_ = new Record();
  Record_KeyValue::default_instance_ = new Record_KeyValue();
  ColumnMetadata::default_instance_ = new ColumnMetadata();
  TabletMetadata::default_instance_ = new TabletMetadata();
  Record::default_instance_->InitAsDefaultInstance();
  Record_KeyValue::default_instance_->InitAsDefaultInstance();
  ColumnMetadata::default_instance_->InitAsDefaultInstance();
  TabletMetadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dullahan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dullahan_2eproto {
  StaticDescriptorInitializer_dullahan_2eproto() {
    protobuf_AddDesc_dullahan_2eproto();
  }
} static_descriptor_initializer_dullahan_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Record_KeyValue::kColumnFieldNumber;
const int Record_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

Record_KeyValue::Record_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.Record.KeyValue)
}

void Record_KeyValue::InitAsDefaultInstance() {
}

Record_KeyValue::Record_KeyValue(const Record_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.Record.KeyValue)
}

void Record_KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  column_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_KeyValue::~Record_KeyValue() {
  // @@protoc_insertion_point(destructor:dullahan.models.Record.KeyValue)
  SharedDtor();
}

void Record_KeyValue::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Record_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_KeyValue_descriptor_;
}

const Record_KeyValue& Record_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

Record_KeyValue* Record_KeyValue::default_instance_ = NULL;

Record_KeyValue* Record_KeyValue::New() const {
  return new Record_KeyValue;
}

void Record_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    column_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.Record.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 column = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.Record.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.Record.KeyValue)
  return false;
#undef DO_
}

void Record_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.Record.KeyValue)
  // optional uint32 column = 1;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->column(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.Record.KeyValue)
}

::google::protobuf::uint8* Record_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.Record.KeyValue)
  // optional uint32 column = 1;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->column(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.Record.KeyValue)
  return target;
}

int Record_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_KeyValue::MergeFrom(const Record_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_KeyValue::CopyFrom(const Record_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_KeyValue::IsInitialized() const {

  return true;
}

void Record_KeyValue::Swap(Record_KeyValue* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_KeyValue_descriptor_;
  metadata.reflection = Record_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Record::kTimestampFieldNumber;
const int Record::kIdFieldNumber;
const int Record::kValuesFieldNumber;
#endif  // !_MSC_VER

Record::Record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.Record)
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.Record)
}

void Record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:dullahan.models.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New() const {
  return new Record;
}

void Record::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional bytes id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated .dullahan.models.Record.KeyValue values = 3;
      case 3: {
        if (tag == 26) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.Record)
  // optional fixed64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->timestamp(), output);
  }

  // optional bytes id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id(), output);
  }

  // repeated .dullahan.models.Record.KeyValue values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.Record)
}

::google::protobuf::uint8* Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.Record)
  // optional fixed64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->timestamp(), target);
  }

  // optional bytes id = 2;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }

  // repeated .dullahan.models.Record.KeyValue values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.Record)
  return target;
}

int Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

  }
  // repeated .dullahan.models.Record.KeyValue values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {

  return true;
}

void Record::Swap(Record* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(id_, other->id_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ColumnMetadata_IndexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnMetadata_IndexType_descriptor_;
}
bool ColumnMetadata_IndexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ColumnMetadata_IndexType ColumnMetadata::NONE;
const ColumnMetadata_IndexType ColumnMetadata::BITMAP;
const ColumnMetadata_IndexType ColumnMetadata::IndexType_MIN;
const ColumnMetadata_IndexType ColumnMetadata::IndexType_MAX;
const int ColumnMetadata::IndexType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ColumnMetadata::kColumnFieldNumber;
const int ColumnMetadata::kTypeFieldNumber;
#endif  // !_MSC_VER

ColumnMetadata::ColumnMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.ColumnMetadata)
}

void ColumnMetadata::InitAsDefaultInstance() {
}

ColumnMetadata::ColumnMetadata(const ColumnMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.ColumnMetadata)
}

void ColumnMetadata::SharedCtor() {
  _cached_size_ = 0;
  column_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnMetadata::~ColumnMetadata() {
  // @@protoc_insertion_point(destructor:dullahan.models.ColumnMetadata)
  SharedDtor();
}

void ColumnMetadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnMetadata_descriptor_;
}

const ColumnMetadata& ColumnMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

ColumnMetadata* ColumnMetadata::default_instance_ = NULL;

ColumnMetadata* ColumnMetadata::New() const {
  return new ColumnMetadata;
}

void ColumnMetadata::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    column_ = 0u;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.ColumnMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 column = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .dullahan.models.ColumnMetadata.IndexType type = 2 [default = BITMAP];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dullahan::models::ColumnMetadata_IndexType_IsValid(value)) {
            set_type(static_cast< ::dullahan::models::ColumnMetadata_IndexType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.ColumnMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.ColumnMetadata)
  return false;
#undef DO_
}

void ColumnMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.ColumnMetadata)
  // optional uint32 column = 1;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->column(), output);
  }

  // optional .dullahan.models.ColumnMetadata.IndexType type = 2 [default = BITMAP];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.ColumnMetadata)
}

::google::protobuf::uint8* ColumnMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.ColumnMetadata)
  // optional uint32 column = 1;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->column(), target);
  }

  // optional .dullahan.models.ColumnMetadata.IndexType type = 2 [default = BITMAP];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.ColumnMetadata)
  return target;
}

int ColumnMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // optional .dullahan.models.ColumnMetadata.IndexType type = 2 [default = BITMAP];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnMetadata::MergeFrom(const ColumnMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnMetadata::CopyFrom(const ColumnMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMetadata::IsInitialized() const {

  return true;
}

void ColumnMetadata::Swap(ColumnMetadata* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnMetadata_descriptor_;
  metadata.reflection = ColumnMetadata_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TabletMetadata_Endianness_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabletMetadata_Endianness_descriptor_;
}
bool TabletMetadata_Endianness_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TabletMetadata_Endianness TabletMetadata::BIG;
const TabletMetadata_Endianness TabletMetadata::LITTLE;
const TabletMetadata_Endianness TabletMetadata::Endianness_MIN;
const TabletMetadata_Endianness TabletMetadata::Endianness_MAX;
const int TabletMetadata::Endianness_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TabletMetadata::kLastTabletIdFieldNumber;
const int TabletMetadata::kWrittenEndiannessFieldNumber;
const int TabletMetadata::kSizeOfBitwordFieldNumber;
const int TabletMetadata::kColumnMetadatasFieldNumber;
#endif  // !_MSC_VER

TabletMetadata::TabletMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.TabletMetadata)
}

void TabletMetadata::InitAsDefaultInstance() {
}

TabletMetadata::TabletMetadata(const TabletMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.TabletMetadata)
}

void TabletMetadata::SharedCtor() {
  _cached_size_ = 0;
  last_tablet_id_ = GOOGLE_ULONGLONG(0);
  written_endianness_ = 0;
  size_of_bitword_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TabletMetadata::~TabletMetadata() {
  // @@protoc_insertion_point(destructor:dullahan.models.TabletMetadata)
  SharedDtor();
}

void TabletMetadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TabletMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TabletMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabletMetadata_descriptor_;
}

const TabletMetadata& TabletMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

TabletMetadata* TabletMetadata::default_instance_ = NULL;

TabletMetadata* TabletMetadata::New() const {
  return new TabletMetadata;
}

void TabletMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TabletMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(last_tablet_id_, size_of_bitword_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  column_metadatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TabletMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.TabletMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_tablet_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_tablet_id_)));
          set_has_last_tablet_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_written_endianness;
        break;
      }

      // optional .dullahan.models.TabletMetadata.Endianness written_endianness = 2;
      case 2: {
        if (tag == 16) {
         parse_written_endianness:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dullahan::models::TabletMetadata_Endianness_IsValid(value)) {
            set_written_endianness(static_cast< ::dullahan::models::TabletMetadata_Endianness >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size_of_bitword;
        break;
      }

      // optional uint32 size_of_bitword = 3;
      case 3: {
        if (tag == 24) {
         parse_size_of_bitword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_of_bitword_)));
          set_has_size_of_bitword();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_column_metadatas;
        break;
      }

      // repeated .dullahan.models.ColumnMetadata column_metadatas = 4;
      case 4: {
        if (tag == 34) {
         parse_column_metadatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column_metadatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_column_metadatas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.TabletMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.TabletMetadata)
  return false;
#undef DO_
}

void TabletMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.TabletMetadata)
  // optional uint64 last_tablet_id = 1;
  if (has_last_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_tablet_id(), output);
  }

  // optional .dullahan.models.TabletMetadata.Endianness written_endianness = 2;
  if (has_written_endianness()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->written_endianness(), output);
  }

  // optional uint32 size_of_bitword = 3;
  if (has_size_of_bitword()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size_of_bitword(), output);
  }

  // repeated .dullahan.models.ColumnMetadata column_metadatas = 4;
  for (int i = 0; i < this->column_metadatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->column_metadatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.TabletMetadata)
}

::google::protobuf::uint8* TabletMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.TabletMetadata)
  // optional uint64 last_tablet_id = 1;
  if (has_last_tablet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_tablet_id(), target);
  }

  // optional .dullahan.models.TabletMetadata.Endianness written_endianness = 2;
  if (has_written_endianness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->written_endianness(), target);
  }

  // optional uint32 size_of_bitword = 3;
  if (has_size_of_bitword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->size_of_bitword(), target);
  }

  // repeated .dullahan.models.ColumnMetadata column_metadatas = 4;
  for (int i = 0; i < this->column_metadatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->column_metadatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.TabletMetadata)
  return target;
}

int TabletMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_tablet_id = 1;
    if (has_last_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_tablet_id());
    }

    // optional .dullahan.models.TabletMetadata.Endianness written_endianness = 2;
    if (has_written_endianness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->written_endianness());
    }

    // optional uint32 size_of_bitword = 3;
    if (has_size_of_bitword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_of_bitword());
    }

  }
  // repeated .dullahan.models.ColumnMetadata column_metadatas = 4;
  total_size += 1 * this->column_metadatas_size();
  for (int i = 0; i < this->column_metadatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column_metadatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TabletMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TabletMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TabletMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TabletMetadata::MergeFrom(const TabletMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_metadatas_.MergeFrom(from.column_metadatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_tablet_id()) {
      set_last_tablet_id(from.last_tablet_id());
    }
    if (from.has_written_endianness()) {
      set_written_endianness(from.written_endianness());
    }
    if (from.has_size_of_bitword()) {
      set_size_of_bitword(from.size_of_bitword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TabletMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TabletMetadata::CopyFrom(const TabletMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabletMetadata::IsInitialized() const {

  return true;
}

void TabletMetadata::Swap(TabletMetadata* other) {
  if (other != this) {
    std::swap(last_tablet_id_, other->last_tablet_id_);
    std::swap(written_endianness_, other->written_endianness_);
    std::swap(size_of_bitword_, other->size_of_bitword_);
    column_metadatas_.Swap(&other->column_metadatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TabletMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TabletMetadata_descriptor_;
  metadata.reflection = TabletMetadata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace models
}  // namespace dullahan

// @@protoc_insertion_point(global_scope)
