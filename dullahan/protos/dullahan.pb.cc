// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dullahan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dullahan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dullahan {
namespace models {

namespace {

const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableSchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableSchema_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableSchema_Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableSchema_Column_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TableSchema_Column_ColumnType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TableSchema_Column_IndexType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TabletMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TabletMetadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TabletMetadata_TabletVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TabletMetadata_Endianness_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Query_Predicate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Query_Predicate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Query_Predicate_PredicateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Query_Predicate_Operator_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dullahan_2eproto() {
  protobuf_AddDesc_dullahan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dullahan.proto");
  GOOGLE_CHECK(file != NULL);
  Record_descriptor_ = file->message_type(0);
  static const int Record_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, values_),
  };
  Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record));
  Record_KeyValue_descriptor_ = Record_descriptor_->nested_type(0);
  static const int Record_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_KeyValue, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_KeyValue, value_),
  };
  Record_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_KeyValue_descriptor_,
      Record_KeyValue::default_instance_,
      Record_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_KeyValue));
  TableSchema_descriptor_ = file->message_type(1);
  static const int TableSchema_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema, columns_),
  };
  TableSchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableSchema_descriptor_,
      TableSchema::default_instance_,
      TableSchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableSchema));
  TableSchema_Column_descriptor_ = TableSchema_descriptor_->nested_type(0);
  static const int TableSchema_Column_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema_Column, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema_Column, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema_Column, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema_Column, index_type_),
  };
  TableSchema_Column_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableSchema_Column_descriptor_,
      TableSchema_Column::default_instance_,
      TableSchema_Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema_Column, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema_Column, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableSchema_Column));
  TableSchema_Column_ColumnType_descriptor_ = TableSchema_Column_descriptor_->enum_type(0);
  TableSchema_Column_IndexType_descriptor_ = TableSchema_Column_descriptor_->enum_type(1);
  TabletMetadata_descriptor_ = file->message_type(2);
  static const int TabletMetadata_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, tablet_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, highest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, timestamp_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, timestamp_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, endianness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, size_of_bitword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, table_metadata_),
  };
  TabletMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TabletMetadata_descriptor_,
      TabletMetadata::default_instance_,
      TabletMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TabletMetadata));
  TabletMetadata_TabletVersion_descriptor_ = TabletMetadata_descriptor_->enum_type(0);
  TabletMetadata_Endianness_descriptor_ = TabletMetadata_descriptor_->enum_type(1);
  Query_descriptor_ = file->message_type(3);
  static const int Query_offsets_[1] = {
  };
  Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Query_descriptor_,
      Query::default_instance_,
      Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Query));
  Query_Predicate_descriptor_ = Query_descriptor_->nested_type(0);
  static const int Query_Predicate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Predicate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Predicate, sub_predicates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Predicate, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Predicate, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Predicate, operands_),
  };
  Query_Predicate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Query_Predicate_descriptor_,
      Query_Predicate::default_instance_,
      Query_Predicate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Predicate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Predicate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Query_Predicate));
  Query_Predicate_PredicateType_descriptor_ = Query_Predicate_descriptor_->enum_type(0);
  Query_Predicate_Operator_descriptor_ = Query_Predicate_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dullahan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_KeyValue_descriptor_, &Record_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableSchema_descriptor_, &TableSchema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableSchema_Column_descriptor_, &TableSchema_Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TabletMetadata_descriptor_, &TabletMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Query_descriptor_, &Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Query_Predicate_descriptor_, &Query_Predicate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dullahan_2eproto() {
  delete Record::default_instance_;
  delete Record_reflection_;
  delete Record_KeyValue::default_instance_;
  delete Record_KeyValue_reflection_;
  delete TableSchema::default_instance_;
  delete TableSchema_reflection_;
  delete TableSchema_Column::default_instance_;
  delete TableSchema_Column_reflection_;
  delete TabletMetadata::default_instance_;
  delete TabletMetadata_reflection_;
  delete Query::default_instance_;
  delete Query_reflection_;
  delete Query_Predicate::default_instance_;
  delete Query_Predicate_reflection_;
}

void protobuf_AddDesc_dullahan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016dullahan.proto\022\017dullahan.models\"\204\001\n\006Re"
    "cord\022\021\n\ttimestamp\030\001 \001(\006\022\n\n\002id\030\002 \001(\014\0220\n\006v"
    "alues\030\003 \003(\0132 .dullahan.models.Record.Key"
    "Value\032)\n\010KeyValue\022\016\n\006column\030\001 \001(\r\022\r\n\005val"
    "ue\030\002 \001(\014\"\240\003\n\013TableSchema\022\022\n\ntable_name\030\001"
    " \001(\t\0224\n\007columns\030\002 \003(\0132#.dullahan.models."
    "TableSchema.Column\032\306\002\n\006Column\022<\n\004type\030\001 "
    "\001(\0162..dullahan.models.TableSchema.Column"
    ".ColumnType\022\014\n\004name\030\002 \001(\t\022\025\n\007enabled\030\003 \001"
    "(\010:\004true\022I\n\nindex_type\030\004 \001(\0162-.dullahan."
    "models.TableSchema.Column.IndexType:\006BIT"
    "MAP\"k\n\nColumnType\022\t\n\005BYTES\020\001\022\n\n\006STRING\020\002"
    "\022\010\n\004BOOL\020\003\022\014\n\010SMALLINT\020\004\022\013\n\007INTEGER\020\005\022\n\n"
    "\006BIGINT\020\006\022\t\n\005FLOAT\020\007\022\n\n\006DOUBLE\020\010\"!\n\tInde"
    "xType\022\010\n\004NONE\020\000\022\n\n\006BITMAP\020\001\"\350\002\n\016TabletMe"
    "tadata\022E\n\016tablet_version\030\001 \001(\0162-.dullaha"
    "n.models.TabletMetadata.TabletVersion\022\022\n"
    "\nhighest_id\030\002 \001(\r\022\027\n\017timestamp_start\030\003 \001"
    "(\004\022\026\n\016timestamp_stop\030\004 \001(\004\022>\n\nendianness"
    "\030\005 \001(\0162*.dullahan.models.TabletMetadata."
    "Endianness\022\027\n\017size_of_bitword\030\006 \001(\r\0224\n\016t"
    "able_metadata\030\007 \001(\0132\034.dullahan.models.Ta"
    "bleSchema\"\030\n\rTabletVersion\022\007\n\003ONE\020\001\"!\n\nE"
    "ndianness\022\007\n\003BIG\020\000\022\n\n\006LITTLE\020\001\"\355\003\n\005Query"
    "\032\343\003\n\tPredicate\022B\n\004type\030\001 \001(\0162..dullahan."
    "models.Query.Predicate.PredicateType:\004NO"
    "DE\0228\n\016sub_predicates\030\002 \003(\0132 .dullahan.mo"
    "dels.Query.Predicate\022\016\n\006column\030\003 \001(\r\022;\n\010"
    "operator\030\004 \001(\0162).dullahan.models.Query.P"
    "redicate.Operator\022\020\n\010operands\030\005 \003(\014\"*\n\rP"
    "redicateType\022\010\n\004NODE\020\001\022\007\n\003AND\020\002\022\006\n\002OR\020\003\""
    "\314\001\n\010Operator\022\t\n\005EQUAL\020\001\022\r\n\tNOT_EQUAL\020\002\022\013"
    "\n\007GREATER\020\003\022\024\n\020GREATER_OR_EQUAL\020\004\022\010\n\004LES"
    "S\020\005\022\021\n\rLESS_OR_EQUAL\020\006\022\006\n\002IN\020\007\022\n\n\006NOT_IN"
    "\020\010\022\013\n\007BETWEEN\020\t\022\017\n\013NOT_BETWEEN\020\n\022\010\n\004LIKE"
    "\020\013\022\014\n\010NOT_LIKE\020\014\022\013\n\007IS_NULL\020\r\022\017\n\013IS_NOT_"
    "NULL\020\016", 1446);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dullahan.proto", &protobuf_RegisterTypes);
  Record::default_instance_ = new Record();
  Record_KeyValue::default_instance_ = new Record_KeyValue();
  TableSchema::default_instance_ = new TableSchema();
  TableSchema_Column::default_instance_ = new TableSchema_Column();
  TabletMetadata::default_instance_ = new TabletMetadata();
  Query::default_instance_ = new Query();
  Query_Predicate::default_instance_ = new Query_Predicate();
  Record::default_instance_->InitAsDefaultInstance();
  Record_KeyValue::default_instance_->InitAsDefaultInstance();
  TableSchema::default_instance_->InitAsDefaultInstance();
  TableSchema_Column::default_instance_->InitAsDefaultInstance();
  TabletMetadata::default_instance_->InitAsDefaultInstance();
  Query::default_instance_->InitAsDefaultInstance();
  Query_Predicate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dullahan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dullahan_2eproto {
  StaticDescriptorInitializer_dullahan_2eproto() {
    protobuf_AddDesc_dullahan_2eproto();
  }
} static_descriptor_initializer_dullahan_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Record_KeyValue::kColumnFieldNumber;
const int Record_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

Record_KeyValue::Record_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.Record.KeyValue)
}

void Record_KeyValue::InitAsDefaultInstance() {
}

Record_KeyValue::Record_KeyValue(const Record_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.Record.KeyValue)
}

void Record_KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  column_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_KeyValue::~Record_KeyValue() {
  // @@protoc_insertion_point(destructor:dullahan.models.Record.KeyValue)
  SharedDtor();
}

void Record_KeyValue::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Record_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_KeyValue_descriptor_;
}

const Record_KeyValue& Record_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

Record_KeyValue* Record_KeyValue::default_instance_ = NULL;

Record_KeyValue* Record_KeyValue::New() const {
  return new Record_KeyValue;
}

void Record_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    column_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.Record.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 column = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.Record.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.Record.KeyValue)
  return false;
#undef DO_
}

void Record_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.Record.KeyValue)
  // optional uint32 column = 1;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->column(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.Record.KeyValue)
}

::google::protobuf::uint8* Record_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.Record.KeyValue)
  // optional uint32 column = 1;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->column(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.Record.KeyValue)
  return target;
}

int Record_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_KeyValue::MergeFrom(const Record_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_KeyValue::CopyFrom(const Record_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_KeyValue::IsInitialized() const {

  return true;
}

void Record_KeyValue::Swap(Record_KeyValue* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_KeyValue_descriptor_;
  metadata.reflection = Record_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Record::kTimestampFieldNumber;
const int Record::kIdFieldNumber;
const int Record::kValuesFieldNumber;
#endif  // !_MSC_VER

Record::Record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.Record)
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.Record)
}

void Record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:dullahan.models.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New() const {
  return new Record;
}

void Record::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional bytes id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated .dullahan.models.Record.KeyValue values = 3;
      case 3: {
        if (tag == 26) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.Record)
  // optional fixed64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->timestamp(), output);
  }

  // optional bytes id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id(), output);
  }

  // repeated .dullahan.models.Record.KeyValue values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.Record)
}

::google::protobuf::uint8* Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.Record)
  // optional fixed64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->timestamp(), target);
  }

  // optional bytes id = 2;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }

  // repeated .dullahan.models.Record.KeyValue values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.Record)
  return target;
}

int Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

  }
  // repeated .dullahan.models.Record.KeyValue values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {

  return true;
}

void Record::Swap(Record* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(id_, other->id_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TableSchema_Column_ColumnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableSchema_Column_ColumnType_descriptor_;
}
bool TableSchema_Column_ColumnType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TableSchema_Column_ColumnType TableSchema_Column::BYTES;
const TableSchema_Column_ColumnType TableSchema_Column::STRING;
const TableSchema_Column_ColumnType TableSchema_Column::BOOL;
const TableSchema_Column_ColumnType TableSchema_Column::SMALLINT;
const TableSchema_Column_ColumnType TableSchema_Column::INTEGER;
const TableSchema_Column_ColumnType TableSchema_Column::BIGINT;
const TableSchema_Column_ColumnType TableSchema_Column::FLOAT;
const TableSchema_Column_ColumnType TableSchema_Column::DOUBLE;
const TableSchema_Column_ColumnType TableSchema_Column::ColumnType_MIN;
const TableSchema_Column_ColumnType TableSchema_Column::ColumnType_MAX;
const int TableSchema_Column::ColumnType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TableSchema_Column_IndexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableSchema_Column_IndexType_descriptor_;
}
bool TableSchema_Column_IndexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TableSchema_Column_IndexType TableSchema_Column::NONE;
const TableSchema_Column_IndexType TableSchema_Column::BITMAP;
const TableSchema_Column_IndexType TableSchema_Column::IndexType_MIN;
const TableSchema_Column_IndexType TableSchema_Column::IndexType_MAX;
const int TableSchema_Column::IndexType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TableSchema_Column::kTypeFieldNumber;
const int TableSchema_Column::kNameFieldNumber;
const int TableSchema_Column::kEnabledFieldNumber;
const int TableSchema_Column::kIndexTypeFieldNumber;
#endif  // !_MSC_VER

TableSchema_Column::TableSchema_Column()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.TableSchema.Column)
}

void TableSchema_Column::InitAsDefaultInstance() {
}

TableSchema_Column::TableSchema_Column(const TableSchema_Column& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.TableSchema.Column)
}

void TableSchema_Column::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = true;
  index_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableSchema_Column::~TableSchema_Column() {
  // @@protoc_insertion_point(destructor:dullahan.models.TableSchema.Column)
  SharedDtor();
}

void TableSchema_Column::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TableSchema_Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableSchema_Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableSchema_Column_descriptor_;
}

const TableSchema_Column& TableSchema_Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

TableSchema_Column* TableSchema_Column::default_instance_ = NULL;

TableSchema_Column* TableSchema_Column::New() const {
  return new TableSchema_Column;
}

void TableSchema_Column::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    enabled_ = true;
    index_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableSchema_Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.TableSchema.Column)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dullahan.models.TableSchema.Column.ColumnType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dullahan::models::TableSchema_Column_ColumnType_IsValid(value)) {
            set_type(static_cast< ::dullahan::models::TableSchema_Column_ColumnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index_type;
        break;
      }

      // optional .dullahan.models.TableSchema.Column.IndexType index_type = 4 [default = BITMAP];
      case 4: {
        if (tag == 32) {
         parse_index_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dullahan::models::TableSchema_Column_IndexType_IsValid(value)) {
            set_index_type(static_cast< ::dullahan::models::TableSchema_Column_IndexType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.TableSchema.Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.TableSchema.Column)
  return false;
#undef DO_
}

void TableSchema_Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.TableSchema.Column)
  // optional .dullahan.models.TableSchema.Column.ColumnType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool enabled = 3 [default = true];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }

  // optional .dullahan.models.TableSchema.Column.IndexType index_type = 4 [default = BITMAP];
  if (has_index_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->index_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.TableSchema.Column)
}

::google::protobuf::uint8* TableSchema_Column::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.TableSchema.Column)
  // optional .dullahan.models.TableSchema.Column.ColumnType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool enabled = 3 [default = true];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabled(), target);
  }

  // optional .dullahan.models.TableSchema.Column.IndexType index_type = 4 [default = BITMAP];
  if (has_index_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->index_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.TableSchema.Column)
  return target;
}

int TableSchema_Column::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dullahan.models.TableSchema.Column.ColumnType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool enabled = 3 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional .dullahan.models.TableSchema.Column.IndexType index_type = 4 [default = BITMAP];
    if (has_index_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->index_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableSchema_Column::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableSchema_Column* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableSchema_Column*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableSchema_Column::MergeFrom(const TableSchema_Column& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_index_type()) {
      set_index_type(from.index_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableSchema_Column::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableSchema_Column::CopyFrom(const TableSchema_Column& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSchema_Column::IsInitialized() const {

  return true;
}

void TableSchema_Column::Swap(TableSchema_Column* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(enabled_, other->enabled_);
    std::swap(index_type_, other->index_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableSchema_Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableSchema_Column_descriptor_;
  metadata.reflection = TableSchema_Column_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TableSchema::kTableNameFieldNumber;
const int TableSchema::kColumnsFieldNumber;
#endif  // !_MSC_VER

TableSchema::TableSchema()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.TableSchema)
}

void TableSchema::InitAsDefaultInstance() {
}

TableSchema::TableSchema(const TableSchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.TableSchema)
}

void TableSchema::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableSchema::~TableSchema() {
  // @@protoc_insertion_point(destructor:dullahan.models.TableSchema)
  SharedDtor();
}

void TableSchema::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void TableSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableSchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableSchema_descriptor_;
}

const TableSchema& TableSchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

TableSchema* TableSchema::default_instance_ = NULL;

TableSchema* TableSchema::New() const {
  return new TableSchema;
}

void TableSchema::Clear() {
  if (has_table_name()) {
    if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      table_name_->clear();
    }
  }
  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.TableSchema)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        break;
      }

      // repeated .dullahan.models.TableSchema.Column columns = 2;
      case 2: {
        if (tag == 18) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.TableSchema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.TableSchema)
  return false;
#undef DO_
}

void TableSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.TableSchema)
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .dullahan.models.TableSchema.Column columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.TableSchema)
}

::google::protobuf::uint8* TableSchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.TableSchema)
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // repeated .dullahan.models.TableSchema.Column columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columns(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.TableSchema)
  return target;
}

int TableSchema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

  }
  // repeated .dullahan.models.TableSchema.Column columns = 2;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableSchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableSchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableSchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableSchema::MergeFrom(const TableSchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableSchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableSchema::CopyFrom(const TableSchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSchema::IsInitialized() const {

  return true;
}

void TableSchema::Swap(TableSchema* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    columns_.Swap(&other->columns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableSchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableSchema_descriptor_;
  metadata.reflection = TableSchema_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TabletMetadata_TabletVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabletMetadata_TabletVersion_descriptor_;
}
bool TabletMetadata_TabletVersion_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TabletMetadata_TabletVersion TabletMetadata::ONE;
const TabletMetadata_TabletVersion TabletMetadata::TabletVersion_MIN;
const TabletMetadata_TabletVersion TabletMetadata::TabletVersion_MAX;
const int TabletMetadata::TabletVersion_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TabletMetadata_Endianness_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabletMetadata_Endianness_descriptor_;
}
bool TabletMetadata_Endianness_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TabletMetadata_Endianness TabletMetadata::BIG;
const TabletMetadata_Endianness TabletMetadata::LITTLE;
const TabletMetadata_Endianness TabletMetadata::Endianness_MIN;
const TabletMetadata_Endianness TabletMetadata::Endianness_MAX;
const int TabletMetadata::Endianness_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TabletMetadata::kTabletVersionFieldNumber;
const int TabletMetadata::kHighestIdFieldNumber;
const int TabletMetadata::kTimestampStartFieldNumber;
const int TabletMetadata::kTimestampStopFieldNumber;
const int TabletMetadata::kEndiannessFieldNumber;
const int TabletMetadata::kSizeOfBitwordFieldNumber;
const int TabletMetadata::kTableMetadataFieldNumber;
#endif  // !_MSC_VER

TabletMetadata::TabletMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.TabletMetadata)
}

void TabletMetadata::InitAsDefaultInstance() {
  table_metadata_ = const_cast< ::dullahan::models::TableSchema*>(&::dullahan::models::TableSchema::default_instance());
}

TabletMetadata::TabletMetadata(const TabletMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.TabletMetadata)
}

void TabletMetadata::SharedCtor() {
  _cached_size_ = 0;
  tablet_version_ = 1;
  highest_id_ = 0u;
  timestamp_start_ = GOOGLE_ULONGLONG(0);
  timestamp_stop_ = GOOGLE_ULONGLONG(0);
  endianness_ = 0;
  size_of_bitword_ = 0u;
  table_metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TabletMetadata::~TabletMetadata() {
  // @@protoc_insertion_point(destructor:dullahan.models.TabletMetadata)
  SharedDtor();
}

void TabletMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete table_metadata_;
  }
}

void TabletMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TabletMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabletMetadata_descriptor_;
}

const TabletMetadata& TabletMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

TabletMetadata* TabletMetadata::default_instance_ = NULL;

TabletMetadata* TabletMetadata::New() const {
  return new TabletMetadata;
}

void TabletMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TabletMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(highest_id_, size_of_bitword_);
    tablet_version_ = 1;
    if (has_table_metadata()) {
      if (table_metadata_ != NULL) table_metadata_->::dullahan::models::TableSchema::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TabletMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.TabletMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dullahan.models.TabletMetadata.TabletVersion tablet_version = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dullahan::models::TabletMetadata_TabletVersion_IsValid(value)) {
            set_tablet_version(static_cast< ::dullahan::models::TabletMetadata_TabletVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_highest_id;
        break;
      }

      // optional uint32 highest_id = 2;
      case 2: {
        if (tag == 16) {
         parse_highest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_id_)));
          set_has_highest_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp_start;
        break;
      }

      // optional uint64 timestamp_start = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_start_)));
          set_has_timestamp_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp_stop;
        break;
      }

      // optional uint64 timestamp_stop = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_stop_)));
          set_has_timestamp_stop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endianness;
        break;
      }

      // optional .dullahan.models.TabletMetadata.Endianness endianness = 5;
      case 5: {
        if (tag == 40) {
         parse_endianness:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dullahan::models::TabletMetadata_Endianness_IsValid(value)) {
            set_endianness(static_cast< ::dullahan::models::TabletMetadata_Endianness >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_size_of_bitword;
        break;
      }

      // optional uint32 size_of_bitword = 6;
      case 6: {
        if (tag == 48) {
         parse_size_of_bitword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_of_bitword_)));
          set_has_size_of_bitword();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_table_metadata;
        break;
      }

      // optional .dullahan.models.TableSchema table_metadata = 7;
      case 7: {
        if (tag == 58) {
         parse_table_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.TabletMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.TabletMetadata)
  return false;
#undef DO_
}

void TabletMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.TabletMetadata)
  // optional .dullahan.models.TabletMetadata.TabletVersion tablet_version = 1;
  if (has_tablet_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tablet_version(), output);
  }

  // optional uint32 highest_id = 2;
  if (has_highest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->highest_id(), output);
  }

  // optional uint64 timestamp_start = 3;
  if (has_timestamp_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_start(), output);
  }

  // optional uint64 timestamp_stop = 4;
  if (has_timestamp_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp_stop(), output);
  }

  // optional .dullahan.models.TabletMetadata.Endianness endianness = 5;
  if (has_endianness()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->endianness(), output);
  }

  // optional uint32 size_of_bitword = 6;
  if (has_size_of_bitword()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->size_of_bitword(), output);
  }

  // optional .dullahan.models.TableSchema table_metadata = 7;
  if (has_table_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->table_metadata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.TabletMetadata)
}

::google::protobuf::uint8* TabletMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.TabletMetadata)
  // optional .dullahan.models.TabletMetadata.TabletVersion tablet_version = 1;
  if (has_tablet_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tablet_version(), target);
  }

  // optional uint32 highest_id = 2;
  if (has_highest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->highest_id(), target);
  }

  // optional uint64 timestamp_start = 3;
  if (has_timestamp_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp_start(), target);
  }

  // optional uint64 timestamp_stop = 4;
  if (has_timestamp_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp_stop(), target);
  }

  // optional .dullahan.models.TabletMetadata.Endianness endianness = 5;
  if (has_endianness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->endianness(), target);
  }

  // optional uint32 size_of_bitword = 6;
  if (has_size_of_bitword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->size_of_bitword(), target);
  }

  // optional .dullahan.models.TableSchema table_metadata = 7;
  if (has_table_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->table_metadata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.TabletMetadata)
  return target;
}

int TabletMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dullahan.models.TabletMetadata.TabletVersion tablet_version = 1;
    if (has_tablet_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tablet_version());
    }

    // optional uint32 highest_id = 2;
    if (has_highest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_id());
    }

    // optional uint64 timestamp_start = 3;
    if (has_timestamp_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_start());
    }

    // optional uint64 timestamp_stop = 4;
    if (has_timestamp_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_stop());
    }

    // optional .dullahan.models.TabletMetadata.Endianness endianness = 5;
    if (has_endianness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->endianness());
    }

    // optional uint32 size_of_bitword = 6;
    if (has_size_of_bitword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_of_bitword());
    }

    // optional .dullahan.models.TableSchema table_metadata = 7;
    if (has_table_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_metadata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TabletMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TabletMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TabletMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TabletMetadata::MergeFrom(const TabletMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablet_version()) {
      set_tablet_version(from.tablet_version());
    }
    if (from.has_highest_id()) {
      set_highest_id(from.highest_id());
    }
    if (from.has_timestamp_start()) {
      set_timestamp_start(from.timestamp_start());
    }
    if (from.has_timestamp_stop()) {
      set_timestamp_stop(from.timestamp_stop());
    }
    if (from.has_endianness()) {
      set_endianness(from.endianness());
    }
    if (from.has_size_of_bitword()) {
      set_size_of_bitword(from.size_of_bitword());
    }
    if (from.has_table_metadata()) {
      mutable_table_metadata()->::dullahan::models::TableSchema::MergeFrom(from.table_metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TabletMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TabletMetadata::CopyFrom(const TabletMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabletMetadata::IsInitialized() const {

  return true;
}

void TabletMetadata::Swap(TabletMetadata* other) {
  if (other != this) {
    std::swap(tablet_version_, other->tablet_version_);
    std::swap(highest_id_, other->highest_id_);
    std::swap(timestamp_start_, other->timestamp_start_);
    std::swap(timestamp_stop_, other->timestamp_stop_);
    std::swap(endianness_, other->endianness_);
    std::swap(size_of_bitword_, other->size_of_bitword_);
    std::swap(table_metadata_, other->table_metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TabletMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TabletMetadata_descriptor_;
  metadata.reflection = TabletMetadata_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Query_Predicate_PredicateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_Predicate_PredicateType_descriptor_;
}
bool Query_Predicate_PredicateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Query_Predicate_PredicateType Query_Predicate::NODE;
const Query_Predicate_PredicateType Query_Predicate::AND;
const Query_Predicate_PredicateType Query_Predicate::OR;
const Query_Predicate_PredicateType Query_Predicate::PredicateType_MIN;
const Query_Predicate_PredicateType Query_Predicate::PredicateType_MAX;
const int Query_Predicate::PredicateType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Query_Predicate_Operator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_Predicate_Operator_descriptor_;
}
bool Query_Predicate_Operator_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Query_Predicate_Operator Query_Predicate::EQUAL;
const Query_Predicate_Operator Query_Predicate::NOT_EQUAL;
const Query_Predicate_Operator Query_Predicate::GREATER;
const Query_Predicate_Operator Query_Predicate::GREATER_OR_EQUAL;
const Query_Predicate_Operator Query_Predicate::LESS;
const Query_Predicate_Operator Query_Predicate::LESS_OR_EQUAL;
const Query_Predicate_Operator Query_Predicate::IN;
const Query_Predicate_Operator Query_Predicate::NOT_IN;
const Query_Predicate_Operator Query_Predicate::BETWEEN;
const Query_Predicate_Operator Query_Predicate::NOT_BETWEEN;
const Query_Predicate_Operator Query_Predicate::LIKE;
const Query_Predicate_Operator Query_Predicate::NOT_LIKE;
const Query_Predicate_Operator Query_Predicate::IS_NULL;
const Query_Predicate_Operator Query_Predicate::IS_NOT_NULL;
const Query_Predicate_Operator Query_Predicate::Operator_MIN;
const Query_Predicate_Operator Query_Predicate::Operator_MAX;
const int Query_Predicate::Operator_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Query_Predicate::kTypeFieldNumber;
const int Query_Predicate::kSubPredicatesFieldNumber;
const int Query_Predicate::kColumnFieldNumber;
const int Query_Predicate::kOperatorFieldNumber;
const int Query_Predicate::kOperandsFieldNumber;
#endif  // !_MSC_VER

Query_Predicate::Query_Predicate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.Query.Predicate)
}

void Query_Predicate::InitAsDefaultInstance() {
}

Query_Predicate::Query_Predicate(const Query_Predicate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.Query.Predicate)
}

void Query_Predicate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  column_ = 0u;
  operator__ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Query_Predicate::~Query_Predicate() {
  // @@protoc_insertion_point(destructor:dullahan.models.Query.Predicate)
  SharedDtor();
}

void Query_Predicate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Query_Predicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query_Predicate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_Predicate_descriptor_;
}

const Query_Predicate& Query_Predicate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

Query_Predicate* Query_Predicate::default_instance_ = NULL;

Query_Predicate* Query_Predicate::New() const {
  return new Query_Predicate;
}

void Query_Predicate::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    type_ = 1;
    column_ = 0u;
    operator__ = 1;
  }
  sub_predicates_.Clear();
  operands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Query_Predicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.Query.Predicate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dullahan.models.Query.Predicate.PredicateType type = 1 [default = NODE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dullahan::models::Query_Predicate_PredicateType_IsValid(value)) {
            set_type(static_cast< ::dullahan::models::Query_Predicate_PredicateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sub_predicates;
        break;
      }

      // repeated .dullahan.models.Query.Predicate sub_predicates = 2;
      case 2: {
        if (tag == 18) {
         parse_sub_predicates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_predicates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sub_predicates;
        if (input->ExpectTag(24)) goto parse_column;
        break;
      }

      // optional uint32 column = 3;
      case 3: {
        if (tag == 24) {
         parse_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_operator;
        break;
      }

      // optional .dullahan.models.Query.Predicate.Operator operator = 4;
      case 4: {
        if (tag == 32) {
         parse_operator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dullahan::models::Query_Predicate_Operator_IsValid(value)) {
            set_operator_(static_cast< ::dullahan::models::Query_Predicate_Operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_operands;
        break;
      }

      // repeated bytes operands = 5;
      case 5: {
        if (tag == 42) {
         parse_operands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_operands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_operands;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.Query.Predicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.Query.Predicate)
  return false;
#undef DO_
}

void Query_Predicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.Query.Predicate)
  // optional .dullahan.models.Query.Predicate.PredicateType type = 1 [default = NODE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .dullahan.models.Query.Predicate sub_predicates = 2;
  for (int i = 0; i < this->sub_predicates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sub_predicates(i), output);
  }

  // optional uint32 column = 3;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->column(), output);
  }

  // optional .dullahan.models.Query.Predicate.Operator operator = 4;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->operator_(), output);
  }

  // repeated bytes operands = 5;
  for (int i = 0; i < this->operands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->operands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.Query.Predicate)
}

::google::protobuf::uint8* Query_Predicate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.Query.Predicate)
  // optional .dullahan.models.Query.Predicate.PredicateType type = 1 [default = NODE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .dullahan.models.Query.Predicate sub_predicates = 2;
  for (int i = 0; i < this->sub_predicates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sub_predicates(i), target);
  }

  // optional uint32 column = 3;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->column(), target);
  }

  // optional .dullahan.models.Query.Predicate.Operator operator = 4;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->operator_(), target);
  }

  // repeated bytes operands = 5;
  for (int i = 0; i < this->operands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->operands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.Query.Predicate)
  return target;
}

int Query_Predicate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dullahan.models.Query.Predicate.PredicateType type = 1 [default = NODE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 column = 3;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // optional .dullahan.models.Query.Predicate.Operator operator = 4;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
    }

  }
  // repeated .dullahan.models.Query.Predicate sub_predicates = 2;
  total_size += 1 * this->sub_predicates_size();
  for (int i = 0; i < this->sub_predicates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_predicates(i));
  }

  // repeated bytes operands = 5;
  total_size += 1 * this->operands_size();
  for (int i = 0; i < this->operands_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->operands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query_Predicate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Query_Predicate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Query_Predicate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Query_Predicate::MergeFrom(const Query_Predicate& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_predicates_.MergeFrom(from.sub_predicates_);
  operands_.MergeFrom(from.operands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Query_Predicate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query_Predicate::CopyFrom(const Query_Predicate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_Predicate::IsInitialized() const {

  return true;
}

void Query_Predicate::Swap(Query_Predicate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    sub_predicates_.Swap(&other->sub_predicates_);
    std::swap(column_, other->column_);
    std::swap(operator__, other->operator__);
    operands_.Swap(&other->operands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Query_Predicate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Query_Predicate_descriptor_;
  metadata.reflection = Query_Predicate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Query::Query()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dullahan.models.Query)
}

void Query::InitAsDefaultInstance() {
}

Query::Query(const Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dullahan.models.Query)
}

void Query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:dullahan.models.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_descriptor_;
}

const Query& Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dullahan_2eproto();
  return *default_instance_;
}

Query* Query::default_instance_ = NULL;

Query* Query::New() const {
  return new Query;
}

void Query::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dullahan.models.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dullahan.models.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dullahan.models.Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dullahan.models.Query)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dullahan.models.Query)
}

::google::protobuf::uint8* Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dullahan.models.Query)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dullahan.models.Query)
  return target;
}

int Query::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {

  return true;
}

void Query::Swap(Query* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Query_descriptor_;
  metadata.reflection = Query_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace models
}  // namespace dullahan

// @@protoc_insertion_point(global_scope)
