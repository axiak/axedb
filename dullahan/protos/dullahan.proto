package dullahan.models;

message Record {
    message KeyValue {
        optional uint32 column = 1;
        optional bytes value = 2;
        // Record last field: 2
    }

    optional fixed64 timestamp = 1;
    optional bytes id = 2;
    repeated KeyValue values = 3;
    // Record last field: 3
}


message TableSchema {
    message Column {
        enum ColumnType {
            BYTES = 1;
            STRING = 2;
            BOOL = 3;

            SMALLINT = 4; /* 2 byte */
            INTEGER = 5;  /* 4 byte */
            BIGINT = 6;   /* 8 byte */
            FLOAT = 7;    /* 4 byte */
            DOUBLE = 8;   /* 8 byte */
        }
        optional ColumnType type = 1;
        optional string name = 2;
        optional bool enabled = 3 [default=true];

        enum IndexType {
            NONE = 0;
            BITMAP = 1;
        }
        optional IndexType index_type = 4 [default=BITMAP];
    }
    optional string table_name = 1;
    repeated Column columns = 2;
}


message TabletMetadata {
    enum TabletVersion {
        ONE = 1;
    }
    optional TabletVersion tablet_version = 1;
    optional uint32 highest_id = 2;
    optional uint64 timestamp_start = 3;
    optional uint64 timestamp_stop = 4;


    enum Endianness {
        BIG = 0;
        LITTLE = 1;
    }
    optional Endianness endianness = 5;
    optional uint32 size_of_bitword = 6;

    optional TableSchema table_metadata = 7;
    // TabletMetadata last field: 7
}

message Query {
  message Predicate {
    enum PredicateType {
        NODE = 1;
        AND = 2;
        OR = 3;
    }
    optional PredicateType type = 1 [default=NODE];
    repeated Predicate sub_predicates = 2;
    optional uint32 column = 3;
    enum Operator {
        EQUAL = 1;
        NOT_EQUAL = 2;
        GREATER = 3;
        GREATER_OR_EQUAL = 4;
        LESS = 5;
        LESS_OR_EQUAL = 6;
        IN = 7;
        NOT_IN = 8;
        BETWEEN = 9;
        NOT_BETWEEN = 10;
        LIKE = 11;
        NOT_LIKE = 12;
        IS_NULL = 13;
        IS_NOT_NULL = 14;
    }
    optional Operator operator = 4;
    repeated bytes operands = 5;
  }
}

message CRDT {

  message PNCounter {
    message ServerItem {
      optional uint32 server_id = 1;
      optional bytes positive = 2;
      optional bytes negative = 3;
    }
    repeated ServerItem server_items = 1;
  }

}