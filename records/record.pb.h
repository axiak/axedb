// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef PROTOBUF_record_2eproto__INCLUDED
#define PROTOBUF_record_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_record_2eproto();
void protobuf_AssignDesc_record_2eproto();
void protobuf_ShutdownFile_record_2eproto();

class Record;
class Record_KeyValue;

// ===================================================================

class Record_KeyValue : public ::google::protobuf::Message {
 public:
  Record_KeyValue();
  virtual ~Record_KeyValue();

  Record_KeyValue(const Record_KeyValue& from);

  inline Record_KeyValue& operator=(const Record_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record_KeyValue& default_instance();

  void Swap(Record_KeyValue* other);

  // implements Message ----------------------------------------------

  Record_KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record_KeyValue& from);
  void MergeFrom(const Record_KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 column = 1;
  inline bool has_column() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 1;
  inline ::google::protobuf::uint32 column() const;
  inline void set_column(::google::protobuf::uint32 value);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Record.KeyValue)
 private:
  inline void set_has_column();
  inline void clear_has_column();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* value_;
  ::google::protobuf::uint32 column_;
  friend void  protobuf_AddDesc_record_2eproto();
  friend void protobuf_AssignDesc_record_2eproto();
  friend void protobuf_ShutdownFile_record_2eproto();

  void InitAsDefaultInstance();
  static Record_KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Record_KeyValue KeyValue;

  // accessors -------------------------------------------------------

  // optional fixed64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional bytes id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated .Record.KeyValue values = 3;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 3;
  inline const ::Record_KeyValue& values(int index) const;
  inline ::Record_KeyValue* mutable_values(int index);
  inline ::Record_KeyValue* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::Record_KeyValue >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::Record_KeyValue >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Record)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::Record_KeyValue > values_;
  friend void  protobuf_AddDesc_record_2eproto();
  friend void protobuf_AssignDesc_record_2eproto();
  friend void protobuf_ShutdownFile_record_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// ===================================================================


// ===================================================================

// Record_KeyValue

// optional uint32 column = 1;
inline bool Record_KeyValue::has_column() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record_KeyValue::set_has_column() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record_KeyValue::clear_has_column() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record_KeyValue::clear_column() {
  column_ = 0u;
  clear_has_column();
}
inline ::google::protobuf::uint32 Record_KeyValue::column() const {
  // @@protoc_insertion_point(field_get:Record.KeyValue.column)
  return column_;
}
inline void Record_KeyValue::set_column(::google::protobuf::uint32 value) {
  set_has_column();
  column_ = value;
  // @@protoc_insertion_point(field_set:Record.KeyValue.column)
}

// optional bytes value = 2;
inline bool Record_KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record_KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record_KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record_KeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Record_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:Record.KeyValue.value)
  return *value_;
}
inline void Record_KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:Record.KeyValue.value)
}
inline void Record_KeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Record.KeyValue.value)
}
inline void Record_KeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Record.KeyValue.value)
}
inline ::std::string* Record_KeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Record.KeyValue.value)
  return value_;
}
inline ::std::string* Record_KeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Record_KeyValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Record.KeyValue.value)
}

// -------------------------------------------------------------------

// Record

// optional fixed64 timestamp = 1;
inline bool Record::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Record::timestamp() const {
  // @@protoc_insertion_point(field_get:Record.timestamp)
  return timestamp_;
}
inline void Record::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Record.timestamp)
}

// optional bytes id = 2;
inline bool Record::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Record::id() const {
  // @@protoc_insertion_point(field_get:Record.id)
  return *id_;
}
inline void Record::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:Record.id)
}
inline void Record::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Record.id)
}
inline void Record::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Record.id)
}
inline ::std::string* Record::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Record.id)
  return id_;
}
inline ::std::string* Record::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Record::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Record.id)
}

// repeated .Record.KeyValue values = 3;
inline int Record::values_size() const {
  return values_.size();
}
inline void Record::clear_values() {
  values_.Clear();
}
inline const ::Record_KeyValue& Record::values(int index) const {
  // @@protoc_insertion_point(field_get:Record.values)
  return values_.Get(index);
}
inline ::Record_KeyValue* Record::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Record.values)
  return values_.Mutable(index);
}
inline ::Record_KeyValue* Record::add_values() {
  // @@protoc_insertion_point(field_add:Record.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Record_KeyValue >&
Record::values() const {
  // @@protoc_insertion_point(field_list:Record.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::Record_KeyValue >*
Record::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Record.values)
  return &values_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_record_2eproto__INCLUDED
